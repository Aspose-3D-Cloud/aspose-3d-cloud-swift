//
// ThreeDCloudAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import Aspose3DCloud


class ThreeDCloudAPITests: Aspose3DCloudTests {

	override func setUp() 
	{
		super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "ThreeDCloudAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error ThreeDCloudAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
		super.tearDown()
	}
	
	func testdeleteNodes() 
	{
		let expectation = self.expectation(description: "testdeleteNodes")
		let name:String = "oaptest.pdf"
		let objectaddressingpath:String = "//*[(@Type = 'Camera') or (@Name = 'light')]"
		let folder:String? = "Swift"
		let storage:String? = nil
		
		uploadFile(name: name, folder: folder!) {
			ThreeDCloudAPI.deleteNodes(name: name, objectaddressingpath: objectaddressingpath, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testdeleteNodes")
					return
				}
	
                if response != nil {
                    expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostConvertByFormat() 
	{
		let expectation = self.expectation(description: "testpostConvertByFormat")
		let name:String = "oaptest.fbx"
		let newformat:String = "pdf"
		let newfilename:String = "oaptest.pdf"
		let folder:String? = "Swift"
		let isOverwrite:Bool? = true
		let storage:String? = STROAGR_NAME
		
        uploadFile(name: name, folder: folder!) {
			ThreeDCloudAPI.postConvertByFormat(name: name, newformat: newformat, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testpostConvertByFormat")
					return
				}
	
                if response != nil {
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostConvertByOpt() 
	{
		let expectation = self.expectation(description: "testpostConvertByOpt")
		let name:String = "oaptest.pdf"
        //let fileSystem:FileSystem = FileSystem(fileSystemType: .MEMORY_FILE_SYSTEM, directory: nil)
        let positionComponents:[String] = ["x","y","z"]
		let saveOptions:SaveOptions = PlySaveOption(saveFormat: SaveFormat.PLY, lookupPaths: nil, fileName: nil, fileFormat: nil, flipCoordinate: nil, vertexElement: nil, positionComponents: positionComponents, faceElement: nil, faceProperty: nil, fileContentType: nil)
		let newfilename:String = "saveasOptS.pdf"
		let folder:String? = SwiftTestFOLDER
		let isOverwrite:Bool? = true
		let storage:String? = STROAGR_NAME
		
		uploadFile(name: name, folder: folder!) {
			ThreeDCloudAPI.postConvertByOpt(name: name, saveOptions: saveOptions, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage)
			{
				(response, error) in
				guard error == nil else {
                    let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                    print("error info: \(errorinfo!)")
					XCTFail("error testpostConvertByOpt")
					return
				}
	
                if response != nil {
					//XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testpostSaveAsPart()
    {
        let expectation = self.expectation(description: "testpostSaveAsPart")
        let name:String = "parttest.fbx"
        let objectaddressingpath:String = "a1"
        let newformat:String = "pdf"
        let newfilename:String = "SaveAsPart.pdf"
        let folder:String? = SwiftTestFOLDER
        let isOverwrite:Bool? = true
        let storage:String? = nil
        
        uploadFile(name: name, folder: folder!) {
            ThreeDCloudAPI.postSaveAsPart(name: name, objectaddressingpath: objectaddressingpath, newformat: newformat, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testpostSaveAsPart")
                    return
                }
                
                if response != nil {
                    //XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

	func testpostCreate() 
	{
		let expectation = self.expectation(description: "testpostCreate")
		let format:String = "pdf"

        ThreeDCloudAPI.postCreate(format: format)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testpostCreate")
                return
            }

            if let response = response {
                //response is Data, we may write it down and check it.
                let fileName = "testpostCreate.pdf"
                let filePath = NSHomeDirectory()
                let fileManager = FileManager.default
                let path = "\(filePath)/tmp/\(fileName)"
                fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                let handle = FileHandle(forWritingAtPath:path)
                handle?.write(response as Data)
                expectation.fulfill()
            }
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostModel() 
	{
		let expectation = self.expectation(description: "testpostModel")
		let name:String = "Aspose.pdf"
		let newformat:String? = "pdf"
		let folder:String? = SwiftTestFOLDER
		let storage:String? = nil
        
        let translation:Vector3 = Vector3(x: 100, y: 100, z: 100, length2: 1, length: 1)
        let transform:Transform = Transform(translation: translation, scale: nil, preRotation: nil, postRotation: nil, eulerAngles: nil)
        
        let torus:Torus = Torus(name: "", radius: 10, tube: 20, radialSegments: 10, tubularSegments: 10, arc: 6)
        let entity:Entity = Entity(type: "torus", box: nil, cylinder: nil, sphere: nil, torus: torus, plane: nil)
        
        let modeldata:ModelData = ModelData(type: "Node", transform: transform, entity: entity)
		
		uploadFile(name: name, folder: folder!) {
			ThreeDCloudAPI.postModel(name: name, modeldata: modeldata, newformat: newformat, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
                    let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
					print("error info: \(errorinfo!)")
                    XCTFail("error testpostModel")
					return
				}
	
                if response != nil {
					//XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostPdfRawData() 
	{
		let expectation = self.expectation(description: "testpostPdfRawData")
		let name:String = "extracttest.pdf"
		let multifileprefix:String = "rawdata"
		let password:String? = ""
		let folder:String? = SwiftTestFOLDER
		let storage:String? = nil
        
        uploadFile(name: name, folder: folder!) {
            self.deleteFile(name: "\(folder!)/\(multifileprefix)-1") {
            
                ThreeDCloudAPI.postPdfRawData(name: name, multifileprefix: multifileprefix, password: password, folder: folder, storage: storage)
                {
                    (response, error) in
                    guard error == nil else {
                        let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                        print("error info: \(errorinfo!)")
                        XCTFail("error testpostPdfRawData")
                        return
                    }
                    
                    if response != nil {
                        //XCTAssertEqual(response.code, 200)
                        expectation.fulfill()
                    }
                }
            
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
	}

	func testpostSceneToFile() 
	{
		let expectation = self.expectation(description: "testpostSceneToFile")
		let name:String = "extracttest.pdf"
		let multifileprefix:String = "newScene"
		let newformat:String? = "pdf"
		let password:String? = nil
		let folder:String? = SwiftTestFOLDER
		let storage:String? = nil
		
		uploadFile(name: name, folder: folder!) {
            self.deleteFile(name: "\(folder!)/\(multifileprefix)-1.pdf") {
                ThreeDCloudAPI.postSceneToFile(name: name, multifileprefix: multifileprefix, newformat: newformat, password: password, folder: folder, storage: storage)
                {
                    (response, error) in
                    guard error == nil else {
                        let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                        print("error info: \(errorinfo!)")
                        XCTFail("error testpostSceneToFile")
                        return
                    }
        
                    if response != nil {
                        //XCTAssertEqual(response.code, 200)
                        expectation.fulfill()
                    }
                }
            }
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostTriangulateNew() 
	{
		let expectation = self.expectation(description: "testpostTriangulateNew")
		let name:String = "triangulate.3ds"
		let newfilename:String = "triangulateNew"
		let newformat:String = "pdf"
		let folder:String? = SwiftTestFOLDER
		let storage:String? = nil
		
		uploadFile(name: name, folder: folder!) {
            self.deleteFile(name: "\(folder!)/\(newfilename)") {
                ThreeDCloudAPI.postTriangulateNew(name: name, newfilename: newfilename, newformat: newformat, folder: folder, storage: storage)
                {
                    (response, error) in
                    guard error == nil else {
                        let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                        print("error info: \(errorinfo!)")
                        XCTFail("error testpostTriangulateNew")
                        return
                    }
        
                    if response != nil {
                        //XCTAssertEqual(response.code, 200)
                        expectation.fulfill()
                    }
                }
            }
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostTriangulateOriginal() 
	{
		let expectation = self.expectation(description: "testpostTriangulateOriginal")
		let name:String = "triangulate.3ds"
		let folder:String? = SwiftTestFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			ThreeDCloudAPI.postTriangulateOriginal(name: name, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testpostTriangulateOriginal")
					return
				}
	
                if response != nil {
					//XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    /*
    func testpostTriangulatePart()
    {
        let expectation = self.expectation(description: "testpostTriangulatePart")
        let name:String = "triangulate.3ds"
        let objectaddressingpath:String
        let newfilename:String
        let newformat:String
        let folder:String? = nil
        let storage:String? = nil
        
        uploadFile(name: name) {
            ThreeDCloudAPI.postTriangulatePart(name: name, objectaddressingpath: objectaddressingpath, newfilename: newfilename, newformat: newformat, folder: folder, storage: storage)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testpostTriangulatePart")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
*/
}
