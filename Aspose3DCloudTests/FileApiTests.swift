//
// FileApiTests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import Aspose3DCloud


class FileApiTests: Aspose3DCloudTests {
    
    override func setUp()
    {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
        let expectation = self.expectation(description: "FileApiTestsSetUp")
        AuthAspose.checkAuth()
        {
            (authError) in
            guard authError == nil else {
                XCTFail("error FileAPITestsSetUp")
                return
            }
            expectation.fulfill()
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    override func tearDown()
    {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    

    func testcopyFile()
    {
        let expectation = self.expectation(description: "testcopyFile")
        let srcPath:String = LocalTestThreeDFile
        let destPath:String = "\(SwiftTestFOLDER)/\(LocalTestThreeDFile)"
        let srcStorageName:String? = nil
        let destStorageName:String? = nil
        let versionId:String? = nil

        uploadFile(name: srcPath) {
            ThreeDCloudAPI.copyFile(srcPath: srcPath, destPath: destPath, srcStorageName: srcStorageName, destStorageName: destStorageName, versionId: versionId)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcopyFile")
                    return
                }
                
                if response != nil {
                    //XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testdeleteFile()
    {
        let expectation = self.expectation(description: "testdeleteFile")
        let path:String = LocalTestThreeDFile
        let storageName:String? = STROAGR_NAME
        let versionId:String? = nil
        
        uploadFile(name: path) {
            ThreeDCloudAPI.deleteFile(path: path, storageName: storageName, versionId: versionId)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testdeleteFile")
                    return
                }
                
                if response != nil {
                    //XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testdownloadFile()
    {
        let expectation = self.expectation(description: "testdownloadFile")
        let path:String = "Aspose.pdf" //LocalTestThreeDFile
        let storageName:String? = nil
        let versionId:String? = nil
        
        uploadFile(name: path) {
            ThreeDCloudAPI.downloadFile(path: path, storageName: storageName, versionId: versionId)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testdownloadFile")
                    return
                }
                
                if let response = response {
                    //response is Data, we may write it down and check it.
                    let fileName = "testdownloadFile.pdf"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testmoveFile()
    {
        let expectation = self.expectation(description: "testmoveFile")
        let srcPath:String = LocalTestThreeDFile
        let destPath:String = "\(SwiftTestFOLDER)/\(LocalTestThreeDFile)"
        let srcStorageName:String? = nil
        let destStorageName:String? = nil
        let versionId:String? = nil
        
        uploadFile(name: srcPath) {
            ThreeDCloudAPI.moveFile(srcPath: srcPath, destPath: destPath, srcStorageName: srcStorageName, destStorageName: destStorageName, versionId: versionId)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testmoveFile")
                    return
                }
                
                if response != nil {
                    //XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testuploadFile()
    {
        let expectation = self.expectation(description: "testuploadFile")
        let path:String = LocalTestThreeDFile
        let file:URL? = getURL(path)
        let storageName:String? = nil
        
        ThreeDCloudAPI.uploadFile(path: path, file: file!, storageName: storageName)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testuploadFile")
                return
            }
            
            if let response = response {
                XCTAssertTrue(response.uploaded!.count > 0)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
}
