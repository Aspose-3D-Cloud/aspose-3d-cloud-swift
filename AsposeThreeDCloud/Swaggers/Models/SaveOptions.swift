//
// SaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class SaveOptions: Codable {

    /** Gets or sets  of the SaveFormat. */
    public var saveFormat: SaveFormat?
    /** Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load */
    public var lookupPaths: [String]?
    /** The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ's material. */
    public var fileName: String?
    /** The file format, like FBX,U3D,PDF .... */
    public var fileFormat: String?

public enum CodingKeys: String, CodingKey { 
        case saveFormat = "SaveFormat"
        case lookupPaths = "LookupPaths"
        case fileName = "FileName"
        case fileFormat = "FileFormat"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?) {
        self.saveFormat = saveFormat
        self.lookupPaths = lookupPaths
        self.fileName = fileName
        self.fileFormat = fileFormat
    }

    // Encodable protocol methods
    
    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(saveFormat, forKey: "SaveFormat")
        try container.encodeIfPresent(lookupPaths, forKey: "LookupPaths")
        try container.encodeIfPresent(fileName, forKey: "FileName")
        try container.encodeIfPresent(fileFormat, forKey: "FileFormat")
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        saveFormat = try container.decodeIfPresent(SaveFormat.self, forKey: "SaveFormat")
        lookupPaths = try container.decodeIfPresent([String].self, forKey: "LookupPaths")
        fileName = try container.decodeIfPresent(String.self, forKey: "FileName")
        fileFormat = try container.decodeIfPresent(String.self, forKey: "FileFormat")
    }

}

