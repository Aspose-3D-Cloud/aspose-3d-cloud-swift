//
// HTMLSaveOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class HTMLSaveOption: SaveOptions {

    /**  Display a grid in the scene. Default value is true. */
    public var showGrid: Bool?
    /**  Display rulers of x/y/z axises in the scene to measure the model. Default value is false */
    public var showRulers: Bool?
    /** Display a simple UI in the scene. Default value is true */
    public var showUI: Bool?
    /** Display a orientation box. Default value is true. */
    public var orientationBox: Bool?
    /** Gets or sets the up vector, value can be \&quot;x\&quot;/\&quot;y\&quot;/\&quot;z\&quot;, default value is \&quot;y\&quot;. */
    public var upVector: String?
    /** Gets or sets the far plane of the camera, default value is 1000 */
    public var farPlane: Double?
    /** Gets or sets the near plane of the camera, default value is 1 */
    public var nearPlane: Double?
    /** Gets or sets the default look at position, default value is (0, 0, 0) */
    public var lookAt: Vector3?
    /** Gets or sets the initial position of the camera, default value is (10, 10, 10) */
    public var cameraPosition: Vector3?
    /**  Gets or sets the field of the view, default value is 45, measured in degree */
    public var fieldOfView: Double?

public enum CodingKeys: String, CodingKey {
        case showGrid = "ShowGrid"
        case showRulers = "ShowRulers"
        case showUI = "ShowUI"
        case orientationBox = "OrientationBox"
        case upVector = "UpVector"
        case farPlane = "FarPlane"
        case nearPlane = "NearPlane"
        case lookAt = "LookAt"
        case cameraPosition = "CameraPosition"
        case fieldOfView = "FieldOfView"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?, showGrid: Bool?, showRulers: Bool?, showUI: Bool?, orientationBox: Bool?, upVector: String?, farPlane: Double?, nearPlane: Double?, lookAt: Vector3?, cameraPosition: Vector3?, fieldOfView: Double?) {
        self.showGrid = showGrid
        self.showRulers = showRulers
        self.showUI = showUI
        self.orientationBox = orientationBox
        self.upVector = upVector
        self.farPlane = farPlane
        self.nearPlane = nearPlane
        self.lookAt = lookAt
        self.cameraPosition = cameraPosition
        self.fieldOfView = fieldOfView
        super.init(saveFormat: saveFormat, lookupPaths: lookupPaths, fileName: fileName, fileFormat: fileFormat)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(showGrid, forKey: "ShowGrid")
        try container.encodeIfPresent(showRulers, forKey: "ShowRulers")
        try container.encodeIfPresent(showUI, forKey: "ShowUI")
        try container.encodeIfPresent(orientationBox, forKey: "OrientationBox")
        
        try container.encodeIfPresent(upVector, forKey: "UpVector")
        try container.encodeIfPresent(farPlane, forKey: "FarPlane")
        try container.encodeIfPresent(nearPlane, forKey: "NearPlane")
        try container.encodeIfPresent(lookAt, forKey: "LookAt")
        
        try container.encodeIfPresent(cameraPosition, forKey: "CameraPosition")
        try container.encodeIfPresent(fieldOfView, forKey: "FieldOfView")
        try super.encode(to: encoder)
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        showGrid = try container.decodeIfPresent(Bool.self, forKey: "ShowGrid")
        showRulers = try container.decodeIfPresent(Bool.self, forKey: "ShowRulers")
        showUI = try container.decodeIfPresent(Bool.self, forKey: "ShowUI")
        orientationBox = try container.decodeIfPresent(Bool.self, forKey: "OrientationBox")
        
        upVector = try container.decodeIfPresent(String.self, forKey: "UpVector")
        farPlane = try container.decodeIfPresent(Double.self, forKey: "FarPlane")
        nearPlane = try container.decodeIfPresent(Double.self, forKey: "NearPlane")
        lookAt = try container.decodeIfPresent(Vector3.self, forKey: "LookAt")
        
        cameraPosition = try container.decodeIfPresent(Vector3.self, forKey: "CameraPosition")
        fieldOfView = try container.decodeIfPresent(Double.self, forKey: "FieldOfView")
        try super.init(from: decoder)
    }

}

