//
// U3DSaveOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class U3DSaveOption: SaveOptions {

    /** Gets or sets whether flip coordinate system of control points/normal during importing/exporting. */
    public var flipCoordinateSystem: Bool?
    /** Gets or sets whether to enable mesh data compression. */
    public var meshCompression: Bool?
    /** Gets or sets whether to export normal data. */
    public var exportNormals: Bool?
    /** Gets or sets whether to export texture coordinates. */
    public var exportTextureCoordinates: Bool?
    /** Gets or sets whether to export vertex's diffuse color. */
    public var exportVertexDiffuse: Bool?
    /** Gets or sets whether to export vertex' specular color. */
    public var exportVertexSpecular: Bool?

public enum CodingKeys: String, CodingKey {
        case flipCoordinateSystem = "FlipCoordinateSystem"
        case meshCompression = "MeshCompression"
        case exportNormals = "ExportNormals"
        case exportTextureCoordinates = "ExportTextureCoordinates"
        case exportVertexDiffuse = "ExportVertexDiffuse"
        case exportVertexSpecular = "ExportVertexSpecular"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?, flipCoordinateSystem: Bool?, meshCompression: Bool?, exportNormals: Bool?, exportTextureCoordinates: Bool?, exportVertexDiffuse: Bool?, exportVertexSpecular: Bool?) {
        self.flipCoordinateSystem = flipCoordinateSystem
        self.meshCompression = meshCompression
        self.exportNormals = exportNormals
        self.exportTextureCoordinates = exportTextureCoordinates
        self.exportVertexDiffuse = exportVertexDiffuse
        self.exportVertexSpecular = exportVertexSpecular
        super.init(saveFormat: saveFormat, lookupPaths: lookupPaths, fileName: fileName, fileFormat: fileFormat)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(flipCoordinateSystem, forKey: "FlipCoordinateSystem")
        try container.encodeIfPresent(meshCompression, forKey: "MeshCompression")
        try container.encodeIfPresent(exportNormals, forKey: "ExportNormals")
        try container.encodeIfPresent(exportTextureCoordinates, forKey: "ExportTextureCoordinates")
        
        try container.encodeIfPresent(exportVertexDiffuse, forKey: "ExportVertexDiffuse")
        try container.encodeIfPresent(exportVertexSpecular, forKey: "ExportVertexSpecular")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        flipCoordinateSystem = try container.decodeIfPresent(Bool.self, forKey: "FlipCoordinateSystem")
        meshCompression = try container.decodeIfPresent(Bool.self, forKey: "MeshCompression")
        exportNormals = try container.decodeIfPresent(Bool.self, forKey: "ExportNormals")
        exportTextureCoordinates = try container.decodeIfPresent(Bool.self, forKey: "ExportTextureCoordinates")
        
        exportVertexDiffuse = try container.decodeIfPresent(Bool.self, forKey: "ExportVertexDiffuse")
        exportVertexSpecular = try container.decodeIfPresent(Bool.self, forKey: "ExportVertexSpecular")
        try super.init(from: decoder)
    }

}

