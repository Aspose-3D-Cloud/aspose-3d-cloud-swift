//
// PlySaveOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class PlySaveOption: SaveOptions {

    /** Flip the coordinate while saving the scene, default value is true. */
    public var flipCoordinate: Bool?
    /** The element name for the vertex data, default value is \"vertex\". */
    public var vertexElement: String?
    /** The component names for position data, default value is (\"x\", \"y\", \"z\") */
    public var positionComponents: [String]?
    /** The element name for the face data, default value is face. */
    public var faceElement: String?
    /** The property name for the face data, default value is vertex_index. */
    public var faceProperty: String?
    /** Gets or sets  of the FileContent Style. */
    public var fileContentType: FileContentType?

public enum CodingKeys: String, CodingKey {
        case flipCoordinate = "FlipCoordinate"
        case vertexElement = "VertexElement"
        case positionComponents = "PositionComponents"
        case faceElement = "FaceElement"
        case faceProperty = "FaceProperty"
        case fileContentType = "FileContentType"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?, flipCoordinate: Bool?, vertexElement: String?, positionComponents: [String]?, faceElement: String?, faceProperty: String?, fileContentType: FileContentType?) {
        self.flipCoordinate = flipCoordinate
        self.vertexElement = vertexElement
        self.positionComponents = positionComponents
        self.faceElement = faceElement
        self.faceProperty = faceProperty
        self.fileContentType = fileContentType
        super.init(saveFormat: saveFormat, lookupPaths: lookupPaths, fileName: fileName, fileFormat: fileFormat)
    }
    
    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(flipCoordinate, forKey: "FlipCoordinate")
        try container.encodeIfPresent(vertexElement, forKey: "VertexElement")
        try container.encodeIfPresent(positionComponents, forKey: "PositionComponents")
        try container.encodeIfPresent(faceElement, forKey: "FaceElement")
        
        try container.encodeIfPresent(faceProperty, forKey: "FaceProperty")
        try container.encodeIfPresent(fileContentType, forKey: "FileContentType")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        flipCoordinate = try container.decodeIfPresent(Bool.self, forKey: "FlipCoordinate")
        vertexElement = try container.decodeIfPresent(String.self, forKey: "VertexElement")
        positionComponents = try container.decodeIfPresent([String].self, forKey: "PositionComponents")
        faceElement = try container.decodeIfPresent(String.self, forKey: "FaceElement")
        
        faceProperty = try container.decodeIfPresent(String.self, forKey: "FaceProperty")
        fileContentType = try container.decodeIfPresent(FileContentType.self, forKey: "FileContentType")
        try super.init(from: decoder)
    }


}

