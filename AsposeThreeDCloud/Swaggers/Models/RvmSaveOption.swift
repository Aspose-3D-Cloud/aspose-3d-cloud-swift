//
// RvmSaveOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class RvmSaveOption: SaveOptions {

    /** File note in the file header. */
    public var fileNote: String?
    /** Author information, default value is '3d@aspose'. */
    public var author: String?
    /** The timestamp that exported this file, default value is current time. */
    public var creationTime: String?
    /** Gets or sets  of the FileContent Style. */
    public var fileContentType: FileContentType?

public enum CodingKeys: String, CodingKey {
        case fileNote = "FileNote"
        case author = "Author"
        case creationTime = "CreationTime"
        case fileContentType = "FileContentType"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?, fileNote: String?, author: String?, creationTime: String?, fileContentType: FileContentType?) {
        self.fileNote = fileNote
        self.author = author
        self.creationTime = creationTime
        self.fileContentType = fileContentType
        super.init(saveFormat: saveFormat, lookupPaths: lookupPaths, fileName: fileName, fileFormat: fileFormat)
    }
    
    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(fileNote, forKey: "FileNote")
        try container.encodeIfPresent(author, forKey: "Author")
        try container.encodeIfPresent(creationTime, forKey: "CreationTime")
        try container.encodeIfPresent(fileContentType, forKey: "FileContentType")
        
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        fileNote = try container.decodeIfPresent(String.self, forKey: "FileNote")
        author = try container.decodeIfPresent(String.self, forKey: "Author")
        creationTime = try container.decodeIfPresent(String.self, forKey: "CreationTime")
        fileContentType = try container.decodeIfPresent(FileContentType.self, forKey: "FileContentType")

        try super.init(from: decoder)
    }


}

