//
// FBXSaveOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class FBXSaveOption: SaveOptions {

    /**  Compression large binary data in the FBX file, default value is true */
    public var enableCompression: Bool?
    /** Gets or sets whether reuse repeated curve data by increasing last data's ref count */
    public var foldRepeatedCurveData: Bool?
    /** Gets or sets whether export legacy material properties, used for back compatibility. This option is turned on by default */
    public var exportLegacyMaterialProperties: Bool?
    /** Gets or sets whether generate a Video instance for Aspose.ThreeD.Shading.Texture when exporting as FBX. */
    public var videoForTexture: Bool?
    /** Gets or sets whether always generate a Aspose.ThreeD.Entities.VertexElementMaterial for geometries if the attached node contains materials. This is turned off by default. */
    public var generateVertexElementMaterial: Bool?

public enum CodingKeys: String, CodingKey {
        case enableCompression = "EnableCompression"
        case foldRepeatedCurveData = "FoldRepeatedCurveData"
        case exportLegacyMaterialProperties = "ExportLegacyMaterialProperties"
        case videoForTexture = "VideoForTexture"
        case generateVertexElementMaterial = "GenerateVertexElementMaterial"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?, enableCompression: Bool?, foldRepeatedCurveData: Bool?, exportLegacyMaterialProperties: Bool?, videoForTexture: Bool?, generateVertexElementMaterial: Bool?) {
        self.enableCompression = enableCompression
        self.foldRepeatedCurveData = foldRepeatedCurveData
        self.exportLegacyMaterialProperties = exportLegacyMaterialProperties
        self.videoForTexture = videoForTexture
        self.generateVertexElementMaterial = generateVertexElementMaterial
        super.init(saveFormat: saveFormat, lookupPaths: lookupPaths, fileName: fileName, fileFormat: fileFormat)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(enableCompression, forKey: "EnableCompression")
        try container.encodeIfPresent(foldRepeatedCurveData, forKey: "FoldRepeatedCurveData")
        try container.encodeIfPresent(exportLegacyMaterialProperties, forKey: "ExportLegacyMaterialProperties")
        try container.encodeIfPresent(videoForTexture, forKey: "VideoForTexture")
        
        try container.encodeIfPresent(generateVertexElementMaterial, forKey: "GenerateVertexElementMaterial")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        enableCompression = try container.decodeIfPresent(Bool.self, forKey: "EnableCompression")
        foldRepeatedCurveData = try container.decodeIfPresent(Bool.self, forKey: "FoldRepeatedCurveData")
        exportLegacyMaterialProperties = try container.decodeIfPresent(Bool.self, forKey: "ExportLegacyMaterialProperties")
        videoForTexture = try container.decodeIfPresent(Bool.self, forKey: "VideoForTexture")
        
        generateVertexElementMaterial = try container.decodeIfPresent(Bool.self, forKey: "GenerateVertexElementMaterial")
        try super.init(from: decoder)
    }

}

