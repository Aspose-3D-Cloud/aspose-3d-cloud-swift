//
// ObjSaveOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ObjSaveOption: SaveOptions {

    /** Gets or sets whether generate comments for each section. */
    public var verbose: Bool?
    /** Gets or sets whether serialize W component in model&#39;s vertex position. */
    public var serializeW: Bool?
    /** Gets or sets whether import/export materials for each object. */
    public var enableMaterials: Bool?
    /** Gets or sets whether flip coordinate system of control points/normal during importing/exporting. */
    public var flipCoordinateSystem: Bool?

public enum CodingKeys: String, CodingKey {
        case verbose = "Verbose"
        case serializeW = "SerializeW"
        case enableMaterials = "EnableMaterials"
        case flipCoordinateSystem = "FlipCoordinateSystem"
    }

    public init(saveFormat: SaveFormat?, lookupPaths: [String]?, fileName: String?, fileFormat: String?, verbose: Bool?, serializeW: Bool?, enableMaterials: Bool?, flipCoordinateSystem: Bool?) {
        self.verbose = verbose
        self.serializeW = serializeW
        self.enableMaterials = enableMaterials
        self.flipCoordinateSystem = flipCoordinateSystem
        super.init(saveFormat: saveFormat, lookupPaths: lookupPaths, fileName: fileName, fileFormat: fileFormat)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(verbose, forKey: "Verbose")
        try container.encodeIfPresent(serializeW, forKey: "SerializeW")
        try container.encodeIfPresent(enableMaterials, forKey: "EnableMaterials")
        try container.encodeIfPresent(flipCoordinateSystem, forKey: "FlipCoordinateSystem")
        
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        verbose = try container.decodeIfPresent(Bool.self, forKey: "Verbose")
        serializeW = try container.decodeIfPresent(Bool.self, forKey: "SerializeW")
        enableMaterials = try container.decodeIfPresent(Bool.self, forKey: "EnableMaterials")
        flipCoordinateSystem = try container.decodeIfPresent(Bool.self, forKey: "FlipCoordinateSystem")
        try super.init(from: decoder)
    }

}

