//
// ThreeDCloudAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ThreeDCloudAPI {
    /**
     Copy file
     
     - parameter srcPath: (path) Source file path e.g. &#39;/folder/file.ext&#39; 
     - parameter destPath: (query) Destination file path 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)
     - parameter versionId: (query) File version ID to copy (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func copyFile(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil, versionId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        copyFileWithRequestBuilder(srcPath: srcPath, destPath: destPath, srcStorageName: srcStorageName, destStorageName: destStorageName, versionId: versionId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Copy file
     - PUT /3d/storage/file/copy/{srcPath}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter srcPath: (path) Source file path e.g. &#39;/folder/file.ext&#39; 
     - parameter destPath: (query) Destination file path 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)
     - parameter versionId: (query) File version ID to copy (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func copyFileWithRequestBuilder(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil, versionId: String? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/file/copy/{srcPath}"
        let srcPathPreEscape = "\(srcPath)"
        let srcPathPostEscape = srcPathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{srcPath}", with: srcPathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "destPath": destPath, 
            "srcStorageName": srcStorageName, 
            "destStorageName": destStorageName, 
            "versionId": versionId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Copy folder
     
     - parameter srcPath: (path) Source folder path e.g. &#39;/src&#39; 
     - parameter destPath: (query) Destination folder path e.g. &#39;/dst&#39; 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func copyFolder(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        copyFolderWithRequestBuilder(srcPath: srcPath, destPath: destPath, srcStorageName: srcStorageName, destStorageName: destStorageName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Copy folder
     - PUT /3d/storage/folder/copy/{srcPath}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter srcPath: (path) Source folder path e.g. &#39;/src&#39; 
     - parameter destPath: (query) Destination folder path e.g. &#39;/dst&#39; 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func copyFolderWithRequestBuilder(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/folder/copy/{srcPath}"
        let srcPathPreEscape = "\(srcPath)"
        let srcPathPostEscape = srcPathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{srcPath}", with: srcPathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "destPath": destPath, 
            "srcStorageName": srcStorageName, 
            "destStorageName": destStorageName
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create the folder
     
     - parameter path: (path) Folder path to create e.g. &#39;folder_1/folder_2/&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFolder(path: String, storageName: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createFolderWithRequestBuilder(path: path, storageName: storageName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create the folder
     - PUT /3d/storage/folder/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter path: (path) Folder path to create e.g. &#39;folder_1/folder_2/&#39; 
     - parameter storageName: (query) Storage name (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createFolderWithRequestBuilder(path: String, storageName: String? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/folder/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete file
     
     - parameter path: (path) File path e.g. &#39;/folder/file.ext&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter versionId: (query) File version ID to delete (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFile(path: String, storageName: String? = nil, versionId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFileWithRequestBuilder(path: path, storageName: storageName, versionId: versionId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete file
     - DELETE /3d/storage/file/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter path: (path) File path e.g. &#39;/folder/file.ext&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter versionId: (query) File version ID to delete (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteFileWithRequestBuilder(path: String, storageName: String? = nil, versionId: String? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/file/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName, 
            "versionId": versionId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete folder
     
     - parameter path: (path) Folder path e.g. &#39;/folder&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter recursive: (query) Enable to delete folders, subfolders and files (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFolder(path: String, storageName: String? = nil, recursive: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFolderWithRequestBuilder(path: path, storageName: storageName, recursive: recursive).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete folder
     - DELETE /3d/storage/folder/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter path: (path) Folder path e.g. &#39;/folder&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter recursive: (query) Enable to delete folders, subfolders and files (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteFolderWithRequestBuilder(path: String, storageName: String? = nil, recursive: Bool? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/folder/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName, 
            "recursive": recursive
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete nodes from scene,nodes are addressed by Object Addressing Path
     
     - parameter name: (query) The name of the source file. 
     - parameter objectaddressingpath: (query) The object addressing path. 
     - parameter folder: (query) The folder of the source file. (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNodes(name: String, objectaddressingpath: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        deleteNodesWithRequestBuilder(name: name, objectaddressingpath: objectaddressingpath, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete nodes from scene,nodes are addressed by Object Addressing Path
     - DELETE /3d/nodes
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The name of the source file. 
     - parameter objectaddressingpath: (query) The object addressing path. 
     - parameter folder: (query) The folder of the source file. (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func deleteNodesWithRequestBuilder(name: String, objectaddressingpath: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/nodes"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "objectaddressingpath": objectaddressingpath, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Download file
     
     - parameter path: (path) File path e.g. &#39;/folder/file.ext&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter versionId: (query) File version ID to download (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadFile(path: String, storageName: String? = nil, versionId: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        downloadFileWithRequestBuilder(path: path, storageName: storageName, versionId: versionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Download file
     - GET /3d/storage/file/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{output=none}]
     
     - parameter path: (path) File path e.g. &#39;/folder/file.ext&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter versionId: (query) File version ID to download (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func downloadFileWithRequestBuilder(path: String, storageName: String? = nil, versionId: String? = nil) -> RequestBuilder<NSData> {
        var _path = "/3d/storage/file/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName, 
            "versionId": versionId
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get disc usage
     
     - parameter storageName: (query) Storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDiscUsage(storageName: String? = nil, completion: @escaping ((_ data: DiscUsage?,_ error: Error?) -> Void)) {
        getDiscUsageWithRequestBuilder(storageName: storageName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get disc usage
     - GET /3d/storage/disc
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example={
  "UsedSize" : 0,
  "TotalSize" : 6
}}]
     
     - parameter storageName: (query) Storage name (optional)

     - returns: RequestBuilder<DiscUsage> 
     */
    open class func getDiscUsageWithRequestBuilder(storageName: String? = nil) -> RequestBuilder<DiscUsage> {
        let _path = "/3d/storage/disc"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName
        ])

        let requestBuilder: RequestBuilder<DiscUsage>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get file versions
     
     - parameter path: (path) File path e.g. &#39;/file.ext&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFileVersions(path: String, storageName: String? = nil, completion: @escaping ((_ data: FileVersions?,_ error: Error?) -> Void)) {
        getFileVersionsWithRequestBuilder(path: path, storageName: storageName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get file versions
     - GET /3d/storage/version/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example={
  "Value" : [ "", "" ]
}}]
     
     - parameter path: (path) File path e.g. &#39;/file.ext&#39; 
     - parameter storageName: (query) Storage name (optional)

     - returns: RequestBuilder<FileVersions> 
     */
    open class func getFileVersionsWithRequestBuilder(path: String, storageName: String? = nil) -> RequestBuilder<FileVersions> {
        var _path = "/3d/storage/version/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName
        ])

        let requestBuilder: RequestBuilder<FileVersions>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all files and folders within a folder
     
     - parameter path: (path) Folder path e.g. &#39;/folder&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFilesList(path: String, storageName: String? = nil, completion: @escaping ((_ data: FilesList?,_ error: Error?) -> Void)) {
        getFilesListWithRequestBuilder(path: path, storageName: storageName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all files and folders within a folder
     - GET /3d/storage/folder/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example={
  "Value" : [ {
    "Path" : "Path",
    "Size" : 0,
    "IsFolder" : true,
    "ModifiedDate" : "ModifiedDate",
    "Name" : "Name"
  }, {
    "Path" : "Path",
    "Size" : 0,
    "IsFolder" : true,
    "ModifiedDate" : "ModifiedDate",
    "Name" : "Name"
  } ]
}}]
     
     - parameter path: (path) Folder path e.g. &#39;/folder&#39; 
     - parameter storageName: (query) Storage name (optional)

     - returns: RequestBuilder<FilesList> 
     */
    open class func getFilesListWithRequestBuilder(path: String, storageName: String? = nil) -> RequestBuilder<FilesList> {
        var _path = "/3d/storage/folder/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName
        ])

        let requestBuilder: RequestBuilder<FilesList>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Move file
     
     - parameter srcPath: (path) Source file path e.g. &#39;/src.ext&#39; 
     - parameter destPath: (query) Destination file path e.g. &#39;/dest.ext&#39; 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)
     - parameter versionId: (query) File version ID to move (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func moveFile(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil, versionId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        moveFileWithRequestBuilder(srcPath: srcPath, destPath: destPath, srcStorageName: srcStorageName, destStorageName: destStorageName, versionId: versionId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Move file
     - PUT /3d/storage/file/move/{srcPath}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter srcPath: (path) Source file path e.g. &#39;/src.ext&#39; 
     - parameter destPath: (query) Destination file path e.g. &#39;/dest.ext&#39; 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)
     - parameter versionId: (query) File version ID to move (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func moveFileWithRequestBuilder(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil, versionId: String? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/file/move/{srcPath}"
        let srcPathPreEscape = "\(srcPath)"
        let srcPathPostEscape = srcPathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{srcPath}", with: srcPathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "destPath": destPath, 
            "srcStorageName": srcStorageName, 
            "destStorageName": destStorageName, 
            "versionId": versionId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Move folder
     
     - parameter srcPath: (path) Folder path to move e.g. &#39;/folder&#39; 
     - parameter destPath: (query) Destination folder path to move to e.g &#39;/dst&#39; 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func moveFolder(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        moveFolderWithRequestBuilder(srcPath: srcPath, destPath: destPath, srcStorageName: srcStorageName, destStorageName: destStorageName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Move folder
     - PUT /3d/storage/folder/move/{srcPath}
     - OAuth:
       - type: oauth2
       - name: JWT
     
     - parameter srcPath: (path) Folder path to move e.g. &#39;/folder&#39; 
     - parameter destPath: (query) Destination folder path to move to e.g &#39;/dst&#39; 
     - parameter srcStorageName: (query) Source storage name (optional)
     - parameter destStorageName: (query) Destination storage name (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func moveFolderWithRequestBuilder(srcPath: String, destPath: String, srcStorageName: String? = nil, destStorageName: String? = nil) -> RequestBuilder<Void> {
        var _path = "/3d/storage/folder/move/{srcPath}"
        let srcPathPreEscape = "\(srcPath)"
        let srcPathPostEscape = srcPathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{srcPath}", with: srcPathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "destPath": destPath, 
            "srcStorageName": srcStorageName, 
            "destStorageName": destStorageName
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Access token
     
     - parameter grantType: (form) Grant Type 
     - parameter clientId: (form) App SID 
     - parameter clientSecret: (form) App Key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func oAuthPost(grantType: String, clientId: String, clientSecret: String, completion: @escaping ((_ data: AccessTokenResponse?,_ error: Error?) -> Void)) {
        oAuthPostWithRequestBuilder(grantType: grantType, clientId: clientId, clientSecret: clientSecret).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Access token
     - POST /connect/token
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  ".expires" : ".expires",
  "token_type" : "token_type",
  "expires_in" : 0,
  "clientRefreshTokenLifeTimeInMinutes" : "clientRefreshTokenLifeTimeInMinutes",
  "client_id" : "client_id",
  ".issued" : ".issued"
}}]
     
     - parameter grantType: (form) Grant Type 
     - parameter clientId: (form) App SID 
     - parameter clientSecret: (form) App Key 

     - returns: RequestBuilder<AccessTokenResponse> 
     */
    open class func oAuthPostWithRequestBuilder(grantType: String, clientId: String, clientSecret: String) -> RequestBuilder<AccessTokenResponse> {
        let _path = "/connect/token"
        let URLString = AsposeThreeDCloudAPI.basePath.replacingOccurrences(of: "/v3.0", with: "") + _path
        let formParams: [String:Any?] = [
            "grant_type": grantType,
            "client_id": clientId,
            "client_secret": clientSecret
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AccessTokenResponse>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if file or folder exists
     
     - parameter path: (path) File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter versionId: (query) File version ID (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func objectExists(path: String, storageName: String? = nil, versionId: String? = nil, completion: @escaping ((_ data: ObjectExist?,_ error: Error?) -> Void)) {
        objectExistsWithRequestBuilder(path: path, storageName: storageName, versionId: versionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if file or folder exists
     - GET /3d/storage/exist/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example={
  "Exists" : true,
  "IsFolder" : true
}}]
     
     - parameter path: (path) File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; 
     - parameter storageName: (query) Storage name (optional)
     - parameter versionId: (query) File version ID (optional)

     - returns: RequestBuilder<ObjectExist> 
     */
    open class func objectExistsWithRequestBuilder(path: String, storageName: String? = nil, versionId: String? = nil) -> RequestBuilder<ObjectExist> {
        var _path = "/3d/storage/exist/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName, 
            "versionId": versionId
        ])

        let requestBuilder: RequestBuilder<ObjectExist>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Convert file on server to other formats with fileformat parameter             
     
     - parameter name: (query) The name of the source file. 
     - parameter newformat: (query) The format of the new file. 
     - parameter newfilename: (query) The name of the new file. 
     - parameter folder: (query) The folder of the source file. (optional)
     - parameter isOverwrite: (query) Overwrite the source file? true or false. (optional, default to false)
     - parameter storage: (query) The storage type. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConvertByFormat(name: String, newformat: String, newfilename: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postConvertByFormatWithRequestBuilder(name: name, newformat: newformat, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert file on server to other formats with fileformat parameter             
     - POST /3d/saveas/newformat
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The name of the source file. 
     - parameter newformat: (query) The format of the new file. 
     - parameter newfilename: (query) The name of the new file. 
     - parameter folder: (query) The folder of the source file. (optional)
     - parameter isOverwrite: (query) Overwrite the source file? true or false. (optional, default to false)
     - parameter storage: (query) The storage type. (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postConvertByFormatWithRequestBuilder(name: String, newformat: String, newfilename: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/saveas/newformat"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "newformat": newformat, 
            "newfilename": newfilename, 
            "folder": folder, 
            "IsOverwrite": isOverwrite, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Convert file on server to other formats with saveOption parameter             
     
     - parameter name: (query) The name of the source file. 
     - parameter saveOptions: (body) The saveOptions to save the file 
     - parameter newfilename: (query) The name of the new file 
     - parameter folder: (query) The folder of the source file (optional)
     - parameter isOverwrite: (query) Overwrite the source file? true or false (optional, default to false)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConvertByOpt(name: String, saveOptions: SaveOptions, newfilename: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postConvertByOptWithRequestBuilder(name: name, saveOptions: saveOptions, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert file on server to other formats with saveOption parameter             
     - POST /3d/saveas/saveoption
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The name of the source file. 
     - parameter saveOptions: (body) The saveOptions to save the file 
     - parameter newfilename: (query) The name of the new file 
     - parameter folder: (query) The folder of the source file (optional)
     - parameter isOverwrite: (query) Overwrite the source file? true or false (optional, default to false)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postConvertByOptWithRequestBuilder(name: String, saveOptions: SaveOptions, newfilename: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/saveas/saveoption"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: saveOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "newfilename": newfilename, 
            "folder": folder, 
            "IsOverwrite": isOverwrite, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create new file with specified format.             
     
     - parameter format: (query) The format of the new file. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCreate(format: String, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postCreateWithRequestBuilder(format: format).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new file with specified format.             
     - POST /3d/new
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{output=none}]
     
     - parameter format: (query) The format of the new file. 

     - returns: RequestBuilder<NSData> 
     */
    open class func postCreateWithRequestBuilder(format: String) -> RequestBuilder<NSData> {
        let _path = "/3d/new"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Parametric Modeling, Create a Entity with size and located in ...
     
     - parameter name: (query) The name of the source file. 
     - parameter modeldata: (body) ModelData struct. 
     - parameter newformat: (query) new format of the source file. (optional)
     - parameter folder: (query) The folder of the source file. (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postModel(name: String, modeldata: ModelData, newformat: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postModelWithRequestBuilder(name: name, modeldata: modeldata, newformat: newformat, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Parametric Modeling, Create a Entity with size and located in ...
     - POST /3d/root
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The name of the source file. 
     - parameter modeldata: (body) ModelData struct. 
     - parameter newformat: (query) new format of the source file. (optional)
     - parameter folder: (query) The folder of the source file. (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postModelWithRequestBuilder(name: String, modeldata: ModelData, newformat: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/root"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modeldata)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "newformat": newformat, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Extract raw data(without any modification) from a password protected PDF file             
     
     - parameter name: (query) The PDF file&#39;s mame 
     - parameter multifileprefix: (query) The file name for generated raw date 
     - parameter password: (query) The password to open the PDF (optional)
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPdfRawData(name: String, multifileprefix: String, password: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postPdfRawDataWithRequestBuilder(name: name, multifileprefix: multifileprefix, password: password, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Extract raw data(without any modification) from a password protected PDF file             
     - POST /3d/extract/rawdata
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The PDF file&#39;s mame 
     - parameter multifileprefix: (query) The file name for generated raw date 
     - parameter password: (query) The password to open the PDF (optional)
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postPdfRawDataWithRequestBuilder(name: String, multifileprefix: String, password: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/extract/rawdata"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "multifileprefix": multifileprefix, 
            "password": password, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Convert part of the file into different format
     
     - parameter name: (query) The name of the source file 
     - parameter objectaddressingpath: (query) The object addressing path 
     - parameter newformat: (query) The format of the new file 
     - parameter newfilename: (query) The name of the new file 
     - parameter folder: (query) The folder of the source file (optional)
     - parameter isOverwrite: (query) Overwrite the source file? true or false (optional, default to false)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSaveAsPart(name: String, objectaddressingpath: String, newformat: String, newfilename: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postSaveAsPartWithRequestBuilder(name: name, objectaddressingpath: objectaddressingpath, newformat: newformat, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert part of the file into different format
     - POST /3d/saveas/part
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The name of the source file 
     - parameter objectaddressingpath: (query) The object addressing path 
     - parameter newformat: (query) The format of the new file 
     - parameter newfilename: (query) The name of the new file 
     - parameter folder: (query) The folder of the source file (optional)
     - parameter isOverwrite: (query) Overwrite the source file? true or false (optional, default to false)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postSaveAsPartWithRequestBuilder(name: String, objectaddressingpath: String, newformat: String, newfilename: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/saveas/part"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "objectaddressingpath": objectaddressingpath, 
            "newformat": newformat, 
            "newfilename": newfilename, 
            "folder": folder, 
            "IsOverwrite": isOverwrite, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Extract and save in different format             
     
     - parameter name: (query) The PDF file&#39;s mame 
     - parameter multifileprefix: (query) The file name for extracted scene 
     - parameter newformat: (query) The format of new file (optional)
     - parameter password: (query) The password to open the PDF (optional)
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSceneToFile(name: String, multifileprefix: String, newformat: String? = nil, password: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postSceneToFileWithRequestBuilder(name: name, multifileprefix: multifileprefix, newformat: newformat, password: password, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Extract and save in different format             
     - POST /3d/extract/scene
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The PDF file&#39;s mame 
     - parameter multifileprefix: (query) The file name for extracted scene 
     - parameter newformat: (query) The format of new file (optional)
     - parameter password: (query) The password to open the PDF (optional)
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postSceneToFileWithRequestBuilder(name: String, multifileprefix: String, newformat: String? = nil, password: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/extract/scene"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "multifileprefix": multifileprefix, 
            "newformat": newformat, 
            "password": password, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Triangulate whole file and save to the different file
     
     - parameter name: (query) The file&#39;s mame 
     - parameter newfilename: (query) The new file&#39;s mame 
     - parameter newformat: (query) The new file&#39;s format 
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTriangulateNew(name: String, newfilename: String, newformat: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postTriangulateNewWithRequestBuilder(name: name, newfilename: newfilename, newformat: newformat, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Triangulate whole file and save to the different file
     - POST /3d/triangulate/new
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The file&#39;s mame 
     - parameter newfilename: (query) The new file&#39;s mame 
     - parameter newformat: (query) The new file&#39;s format 
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postTriangulateNewWithRequestBuilder(name: String, newfilename: String, newformat: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/triangulate/new"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "newfilename": newfilename, 
            "newformat": newformat, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Triangulate whole file and save to original file
     
     - parameter name: (query) The file&#39;s mame 
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTriangulateOriginal(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSData?,_ error: Error?) -> Void)) {
        postTriangulateOriginalWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Triangulate whole file and save to original file
     - POST /3d/triangulate/original
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The file&#39;s mame 
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSData> 
     */
    open class func postTriangulateOriginalWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSData> {
        let _path = "/3d/triangulate/original"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSData>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Triangulate part of the scene(Specified by OAP) and save the scene to different file 
     
     - parameter name: (query) The file&#39;s mame 
     - parameter objectaddressingpath: (query) The node or mesh getted by OAP. 
     - parameter newfilename: (query) The new file&#39;s mame 
     - parameter newformat: (query) The new file&#39;s format 
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTriangulatePart(name: String, objectaddressingpath: String, newfilename: String, newformat: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSURL?,_ error: Error?) -> Void)) {
        postTriangulatePartWithRequestBuilder(name: name, objectaddressingpath: objectaddressingpath, newfilename: newfilename, newformat: newformat, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Triangulate part of the scene(Specified by OAP) and save the scene to different file 
     - POST /3d/triangulate/part
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (query) The file&#39;s mame 
     - parameter objectaddressingpath: (query) The node or mesh getted by OAP. 
     - parameter newfilename: (query) The new file&#39;s mame 
     - parameter newformat: (query) The new file&#39;s format 
     - parameter folder: (query) The folder for source file (optional)
     - parameter storage: (query) The storage type (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func postTriangulatePartWithRequestBuilder(name: String, objectaddressingpath: String, newfilename: String, newformat: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSURL> {
        let _path = "/3d/triangulate/part"
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "objectaddressingpath": objectaddressingpath, 
            "newfilename": newfilename, 
            "newformat": newformat, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSURL>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if storage exists
     
     - parameter storageName: (path) Storage name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storageExists(storageName: String, completion: @escaping ((_ data: StorageExist?,_ error: Error?) -> Void)) {
        storageExistsWithRequestBuilder(storageName: storageName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if storage exists
     - GET /3d/storage/{storageName}/exist
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example={
  "Exists" : true
}}]
     
     - parameter storageName: (path) Storage name 

     - returns: RequestBuilder<StorageExist> 
     */
    open class func storageExistsWithRequestBuilder(storageName: String) -> RequestBuilder<StorageExist> {
        var _path = "/3d/storage/{storageName}/exist"
        let storageNamePreEscape = "\(storageName)"
        let storageNamePostEscape = storageNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{storageName}", with: storageNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StorageExist>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Upload file
     
     - parameter path: (path) Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     - parameter file: (form) File to upload 
     - parameter storageName: (query) Storage name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadFile(path: String, file: URL, storageName: String? = nil, completion: @escaping ((_ data: FilesUploadResult?,_ error: Error?) -> Void)) {
        uploadFileWithRequestBuilder(path: path, file: file, storageName: storageName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Upload file
     - PUT /3d/storage/file/{path}
     - OAuth:
       - type: oauth2
       - name: JWT
     - examples: [{contentType=application/json, example={
  "Errors" : [ {
    "Description" : "Description",
    "Message" : "Message",
    "InnerError" : {
      "RequestId" : "RequestId",
      "Date" : "Date"
    },
    "Code" : "Code"
  }, {
    "Description" : "Description",
    "Message" : "Message",
    "InnerError" : {
      "RequestId" : "RequestId",
      "Date" : "Date"
    },
    "Code" : "Code"
  } ],
  "Uploaded" : [ "Uploaded", "Uploaded" ]
}}]
     
     - parameter path: (path) Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     - parameter file: (form) File to upload 
     - parameter storageName: (query) Storage name (optional)

     - returns: RequestBuilder<FilesUploadResult> 
     */
    open class func uploadFileWithRequestBuilder(path: String, file: URL, storageName: String? = nil) -> RequestBuilder<FilesUploadResult> {
        var _path = "/3d/storage/file/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        _path = _path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = AsposeThreeDCloudAPI.basePath + _path
        let formParams: [String:Any?] = [
            "File": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "storageName": storageName
        ])

        let requestBuilder: RequestBuilder<FilesUploadResult>.Type = AsposeThreeDCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
